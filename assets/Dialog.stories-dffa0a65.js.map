{"version":3,"file":"Dialog.stories-dffa0a65.js","sources":["../../packages/atoms/src/Dialog/Dialog.tsx","../../packages/atoms/src/hooks/useDialog.ts"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\nimport { DialogProps } from \"./types\";\n\n/**\n * `Dialog` is a styled `dialog` HTML element. It can be displayed as a simple dialog or as a modal.\n *\n * The visibility of the dialog is controlled via the `isOpen` prop. To help control this `isOpen` state,\n * you can use the `useDialog` hook which provides the `openDialog` and `closeDialog` functions.\n *\n * @param {object} props The properties for the component.\n * @param {boolean} props.isOpen Whether the dialog is currently open.\n * @param {boolean} [props.isModal] Whether the dialog should be displayed as a modal.\n * @param {() => void} [props.onRequestClose] A function to call when the dialog is requested to close (i.e., when the close event is fired on the dialog).\n * @param {React.ReactNode} props.children The content inside the dialog.\n *\n * @returns {React.ReactElement} Returns a dialog element.\n *\n * @example\n * ```jsx\n * const { isOpen, openDialog, closeDialog } = useDialog();\n *\n * return (\n *   <div>\n *     <button onClick={openDialog}>Open Dialog</button>\n *     <Dialog isOpen={isOpen} onRequestClose={closeDialog}>\n *       <p>This is a dialog</p>\n *     </Dialog>\n *   </div>\n * );\n * ```\n */\n\nconst StyledDialog = styled.dialog<DialogProps>({}, ...commonSystemProps);\n\nconst Dialog: React.FC<DialogProps> = ({\n  isOpen,\n  isModal,\n  onRequestClose,\n  children,\n  ...props\n}) => {\n  const dialogRef = useRef<HTMLDialogElement>(null);\n\n  useEffect(() => {\n    if (dialogRef.current) {\n      isOpen\n        ? isModal\n          ? dialogRef.current.showModal()\n          : dialogRef.current.show()\n        : dialogRef.current.close();\n    }\n  }, [isOpen, isModal]);\n\n  useEffect(() => {\n    const dialogNode = dialogRef.current;\n    if (dialogNode) {\n      const handleCloseEvent = () => {\n        onRequestClose && onRequestClose();\n      };\n\n      dialogNode.addEventListener(\"close\", handleCloseEvent);\n\n      return () => {\n        dialogNode.removeEventListener(\"close\", handleCloseEvent);\n      };\n    } else {\n      return;\n    }\n  }, [onRequestClose]);\n\n  return (\n    <StyledDialog ref={dialogRef} {...props}>\n      {children}\n    </StyledDialog>\n  );\n};\n\nexport default Dialog;\n","import { useState, useCallback } from \"react\";\n\n/**\n * `useDialog` is a hook for controlling the open state of a `Dialog` component.\n *\n * @example\n * ```jsx\n * const { isOpen, openDialog, closeDialog } = useDialog();\n *\n * return (\n *   <div>\n *     <button onClick={openDialog}>Open Dialog</button>\n *     <Dialog isOpen={isOpen} onRequestClose={closeDialog}>\n *       <p>This is a dialog</p>\n *     </Dialog>\n *   </div>\n * );\n * ```\n *\n * @returns {object} An object containing the `isOpen` state and the `openDialog` and `closeDialog` functions.\n */\n\ninterface UseDialogResult {\n  isOpen: boolean;\n  openDialog: () => void;\n  closeDialog: () => void;\n}\n\nexport const useDialog = (initialState: boolean = false): UseDialogResult => {\n  const [isOpen, setIsOpen] = useState(initialState);\n\n  const openDialog = useCallback(() => {\n    setIsOpen(true);\n  }, []);\n\n  const closeDialog = useCallback(() => {\n    setIsOpen(false);\n  }, []);\n\n  return {\n    isOpen,\n    openDialog,\n    closeDialog,\n  };\n};\n"],"names":["StyledDialog","styled","commonSystemProps","Dialog","isOpen","isModal","onRequestClose","children","props","dialogRef","useRef","useEffect","dialogNode","handleCloseEvent","jsx","useDialog","initialState","setIsOpen","useState","openDialog","useCallback","closeDialog"],"mappings":"qcAkCA,MAAAA,EAAAC,EAAA,OAAA,CAAA,EAAA,GAAAC,CAAA,EAEAC,EAAA,CAAA,CAAuC,OAAAC,EACrC,QAAAC,EACA,eAAAC,EACA,SAAAC,EACA,GAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,SAAA,IAAA,EAEAC,OAAAA,EAAAA,UAAA,IAAA,CACEF,EAAA,UACEL,EAAAC,EAAAI,EAAA,QAAA,UAAA,EAAAA,EAAA,QAAA,KAAA,EAAAA,EAAA,QAAA,MAAA,EAKF,EAAA,CAAAL,EAAAC,CAAA,CAAA,EAGFM,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAAH,EAAA,QACA,GAAAG,EAAA,CACE,MAAAC,EAAA,IAAA,CACEP,GAAAA,EAAA,CAAiC,EAGnC,OAAAM,EAAA,iBAAA,QAAAC,CAAA,EAEA,IAAA,CACED,EAAA,oBAAA,QAAAC,CAAA,CAAwD,MAG1D,OACF,EAAA,CAAAP,CAAA,CAAA,EAGFQ,EAAAd,EAAA,CAAA,IAAAS,EAAA,GAAAD,EAAA,SAAAD,CAAA,CAAA,CAKF;uLCjDa,MAAAQ,EAAY,CAACC,EAAwB,KAA2B,CAC3E,KAAM,CAACZ,EAAQa,CAAS,EAAIC,WAASF,CAAY,EAE3CG,EAAaC,EAAAA,YAAY,IAAM,CACnCH,EAAU,EAAI,CAChB,EAAG,CAAE,CAAA,EAECI,EAAcD,EAAAA,YAAY,IAAM,CACpCH,EAAU,EAAK,CACjB,EAAG,CAAE,CAAA,EAEE,MAAA,CACL,OAAAb,EACA,WAAAe,EACA,YAAAE,CAAA,CAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}