{"version":3,"file":"Tooltip-1374056d.js","sources":["../../packages/atoms/src/Dialog/Dialog.tsx","../../packages/atoms/src/Tooltip/Tooltip.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\nimport { DialogProps } from \"./types\";\n\n/**\n * `Dialog` is a styled `dialog` HTML element. It can be displayed as a simple dialog or as a modal.\n *\n * The visibility of the dialog is controlled via the `isOpen` prop. To help control this `isOpen` state,\n * you can use the `useDialog` hook which provides the `openDialog` and `closeDialog` functions.\n *\n * @param {object} props The properties for the component.\n * @param {boolean} props.isOpen Whether the dialog is currently open.\n * @param {boolean} [props.isModal] Whether the dialog should be displayed as a modal.\n * @param {() => void} [props.onRequestClose] A function to call when the dialog is requested to close (i.e., when the close event is fired on the dialog).\n * @param {React.ReactNode} props.children The content inside the dialog.\n *\n * @returns {React.ReactElement} Returns a dialog element.\n *\n * @example\n * ```jsx\n * const { isOpen, openDialog, closeDialog } = useDialog();\n *\n * return (\n *   <div>\n *     <button onClick={openDialog}>Open Dialog</button>\n *     <Dialog isOpen={isOpen} onRequestClose={closeDialog}>\n *       <p>This is a dialog</p>\n *     </Dialog>\n *   </div>\n * );\n * ```\n */\n\nconst StyledDialog = styled.dialog<DialogProps>({}, ...commonSystemProps);\n\nconst Dialog: React.FC<DialogProps> = ({\n  isOpen,\n  isModal,\n  onRequestClose,\n  children,\n  ...props\n}) => {\n  const dialogRef = useRef<HTMLDialogElement>(null);\n\n  useEffect(() => {\n    if (dialogRef.current) {\n      isOpen\n        ? isModal\n          ? dialogRef.current.showModal()\n          : dialogRef.current.show()\n        : dialogRef.current.close();\n    }\n  }, [isOpen, isModal]);\n\n  useEffect(() => {\n    const dialogNode = dialogRef.current;\n    if (dialogNode) {\n      const handleCloseEvent = () => {\n        onRequestClose && onRequestClose();\n      };\n\n      dialogNode.addEventListener(\"close\", handleCloseEvent);\n\n      return () => {\n        dialogNode.removeEventListener(\"close\", handleCloseEvent);\n      };\n    } else {\n      return;\n    }\n  }, [onRequestClose]);\n\n  return (\n    <StyledDialog ref={dialogRef} {...props}>\n      {children}\n    </StyledDialog>\n  );\n};\n\nexport default Dialog;\n","import React, { useRef, useState, useEffect } from \"react\";\nimport { Box } from \"..\";\nimport { TooltipProps } from \"./types\";\n\nconst Tooltip: React.FC<TooltipProps> = ({\n  children,\n  content,\n  visible,\n  tipPosition = \"dynamic\",\n  ...props\n}) => {\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [tooltipPosition, setTooltipPosition] = useState(tipPosition);\n\n  useEffect(() => {\n    setIsVisible(visible || false);\n  }, [visible]);\n\n  useEffect(() => {\n    if (tipPosition === \"dynamic\" && wrapperRef.current) {\n      const rect = wrapperRef.current.getBoundingClientRect();\n      const windowHeight = window.innerHeight;\n      setTooltipPosition(rect.y > windowHeight / 2 ? \"top\" : \"bottom\");\n    } else {\n      setTooltipPosition(tipPosition);\n    }\n  }, [tipPosition]);\n\n  const handleMouseEnter = () => {\n    if (visible !== true) setIsVisible(true);\n  };\n\n  const handleMouseLeave = () => {\n    if (visible !== true) setIsVisible(false);\n  };\n\n  return (\n    <Box\n      ref={wrapperRef}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      display=\"inline-flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      position=\"relative\"\n      {...props}\n    >\n      {children}\n      {isVisible && (\n        <>\n          <Box\n            bg={`${\n              typeof props.tooltipBgColor === \"string\"\n                ? props.tooltipBgColor\n                : \"#333\"\n            }`}\n            borderRadius=\"4px\"\n            color=\"white\"\n            fontSize=\"14px\"\n            p=\"8px\"\n            position=\"absolute\"\n            textAlign={\"center\"}\n            zIndex=\"100\"\n            top={tooltipPosition === \"bottom\" ? \"calc(100% + 5px)\" : undefined}\n            bottom={tooltipPosition === \"top\" ? \"calc(100% + 5px)\" : undefined}\n            left=\"50%\"\n            css={{\n              transform: \"translateX(-50%)\",\n            }}\n          >\n            {content}\n          </Box>\n          <Box\n            width=\"0\"\n            height=\"0\"\n            borderLeft=\"5px solid transparent\"\n            borderRight=\"5px solid transparent\"\n            position=\"absolute\"\n            top={tooltipPosition === \"bottom\" ? \"100%\" : undefined}\n            bottom={tooltipPosition === \"top\" ? \"100%\" : undefined}\n            left=\"50%\"\n            borderBottom={\n              tooltipPosition === \"bottom\"\n                ? `5px solid ${\n                    typeof props.tooltipBgColor === \"string\"\n                      ? props.tooltipBgColor\n                      : \"#333\"\n                  }`\n                : undefined\n            }\n            borderTop={\n              tooltipPosition === \"top\"\n                ? `5px solid ${\n                    typeof props.tooltipBgColor === \"string\"\n                      ? props.tooltipBgColor\n                      : \"#333\"\n                  }`\n                : undefined\n            }\n            css={{\n              transform: \"translateX(-50%)\",\n            }}\n          />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default Tooltip;\n"],"names":["StyledDialog","styled","commonSystemProps","Dialog","isOpen","isModal","onRequestClose","children","props","dialogRef","useRef","useEffect","dialogNode","handleCloseEvent","jsx","Tooltip","content","visible","tipPosition","wrapperRef","isVisible","setIsVisible","useState","tooltipPosition","setTooltipPosition","rect","windowHeight","jsxs","Box","Fragment"],"mappings":"mjBAkCA,MAAAA,EAAAC,EAAA,OAAA,CAAA,EAAA,GAAAC,CAAA,EAEAC,EAAA,CAAA,CAAuC,OAAAC,EACrC,QAAAC,EACA,eAAAC,EACA,SAAAC,EACA,GAAAC,CAEF,IAAA,CACE,MAAAC,EAAAC,SAAA,IAAA,EAEAC,OAAAA,EAAAA,UAAA,IAAA,CACEF,EAAA,UACEL,EAAAC,EAAAI,EAAA,QAAA,UAAA,EAAAA,EAAA,QAAA,KAAA,EAAAA,EAAA,QAAA,MAAA,EAKF,EAAA,CAAAL,EAAAC,CAAA,CAAA,EAGFM,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAAH,EAAA,QACA,GAAAG,EAAA,CACE,MAAAC,EAAA,IAAA,CACEP,GAAAA,EAAA,CAAiC,EAGnC,OAAAM,EAAA,iBAAA,QAAAC,CAAA,EAEA,IAAA,CACED,EAAA,oBAAA,QAAAC,CAAA,CAAwD,MAG1D,OACF,EAAA,CAAAP,CAAA,CAAA,EAGFQ,EAAAd,EAAA,CAAA,IAAAS,EAAA,GAAAD,EAAA,SAAAD,CAAA,CAAA,CAKF;uLCzEA,MAAAQ,EAAA,CAAA,CAAyC,SAAAR,EACvC,QAAAS,EACA,QAAAC,EACA,YAAAC,EAAA,UACc,GAAAV,CAEhB,IAAA,CACE,MAAAW,EAAAT,SAAA,IAAA,EACA,CAAAU,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACA,CAAAC,EAAAC,CAAA,EAAAF,EAAA,SAAAJ,CAAA,EAEAP,OAAAA,EAAAA,UAAA,IAAA,CACEU,EAAAJ,GAAA,EAAA,CAA6B,EAAA,CAAAA,CAAA,CAAA,EAG/BN,EAAAA,UAAA,IAAA,CACE,GAAAO,IAAA,WAAAC,EAAA,QAAA,CACE,MAAAM,EAAAN,EAAA,QAAA,sBAAA,EACAO,EAAA,OAAA,YACAF,EAAAC,EAAA,EAAAC,EAAA,EAAA,MAAA,QAAA,OAEAF,EAAAN,CAAA,CACF,EAAA,CAAAA,CAAA,CAAA,EAWFS,EACEC,EAAC,CAAA,IAAAT,EACM,aAVT,IAAA,CACEF,IAAA,IAAsBI,EAAA,EAAA,CAAiB,EAUvB,aAPlB,IAAA,CACEJ,IAAA,IAAsBI,EAAA,EAAA,CAAkB,EAOxB,QAAA,cACN,eAAA,SACO,WAAA,SACJ,SAAA,WACF,GAAAb,EACL,SAAA,CAEHD,EAAAa,GAAAO,EAAAE,EAAA,CAAA,SAAA,CAGGf,EAAAc,EAAC,CAAA,GAAA,GAAA,OAAApB,EAAA,gBAAA,SAAAA,EAAA,eAAA,SAIO,aAAA,MAEO,MAAA,QACP,SAAA,OACG,EAAA,MACP,SAAA,WACO,UAAA,SACE,OAAA,MACJ,IAAAe,IAAA,SAAA,mBAAA,OACkD,OAAAA,IAAA,MAAA,mBAAA,OACA,KAAA,MACpD,IAAA,CACA,UAAA,kBACQ,EACb,SAAAP,CAEC,CAAA,EACHF,EACAc,EAAC,CAAA,MAAA,IACO,OAAA,IACC,WAAA,wBACI,YAAA,wBACC,SAAA,WACH,IAAAL,IAAA,SAAA,OAAA,OACoC,OAAAA,IAAA,MAAA,OAAA,OACA,KAAA,MACxC,aAAAA,IAAA,SAAA,aAAA,OAAAf,EAAA,gBAAA,SAAAA,EAAA,eAAA,SAAA,OAQC,UAAAe,IAAA,MAAA,aAAA,OAAAf,EAAA,gBAAA,SAAAA,EAAA,eAAA,SAAA,OASA,IAAA,CAED,UAAA,kBACQ,CACb,CAAA,CACF,EAAA,CACF,CAAA,CAAA,CAIR;"}