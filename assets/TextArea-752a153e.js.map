{"version":3,"file":"TextArea-752a153e.js","sources":["../../packages/@nimbleuikit/atoms/lib/system.js","../../packages/@nimbleuikit/atoms/lib/Box/Box.js","../../packages/@nimbleuikit/atoms/lib/Button/Button.js","../../packages/@nimbleuikit/atoms/lib/Dialog/Dialog.js","../../packages/@nimbleuikit/atoms/lib/FlexBox/FlexBox.js","../../packages/@nimbleuikit/atoms/lib/Form/Form.js","../../packages/@nimbleuikit/atoms/lib/Grid/Grid.js","../../packages/@nimbleuikit/atoms/lib/Input/Input.js","../../packages/@nimbleuikit/atoms/lib/Text/Text.js","../../packages/@nimbleuikit/atoms/lib/Label/Label.js","../../packages/@nimbleuikit/atoms/lib/TextArea/TextArea.js"],"sourcesContent":["import { css as styledCss } from \"styled-components\";\nimport { space, color, layout, typography, flexbox, grid, background, border, position, shadow, } from \"styled-system\";\n/**\n * All styled-system functions grouped into a single object.\n * This can be used as the second argument to the `styled` function from `styled-components`.\n */\nexport const commonSystemProps = [\n    space,\n    color,\n    layout,\n    typography,\n    flexbox,\n    grid,\n    background,\n    border,\n    position,\n    shadow,\n    (props) => props.css && styledCss(props.css),\n];\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `Box` is a styled-component used for layout and contains style props for margin and padding.\n *\n * @component\n * @example\n * ```jsx\n * <Box m={2} p={2}>\n *   This is a box component.\n * </Box>\n * ```\n */\nconst Box = styled.div({\n// For static styles\n}, ...commonSystemProps);\nexport default Box;\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `Button` is a styled-component used to create buttons.\n *\n * @component\n * @example\n * ```jsx\n * <Button onClick={() => alert('Clicked!')}>\n *   Click me\n * </Button>\n * ```\n */\nconst Button = styled.button({\n    cursor: \"pointer\",\n    \":disabled\": {\n        opacity: 0.8,\n        cursor: \"not-allowed\",\n    },\n}, ...commonSystemProps);\nexport default Button;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `Dialog` is a styled `dialog` HTML element. It can be displayed as a simple dialog or as a modal.\n *\n * The visibility of the dialog is controlled via the `isOpen` prop. To help control this `isOpen` state,\n * you can use the `useDialog` hook which provides the `openDialog` and `closeDialog` functions.\n *\n * @param {object} props The properties for the component.\n * @param {boolean} props.isOpen Whether the dialog is currently open.\n * @param {boolean} [props.isModal] Whether the dialog should be displayed as a modal.\n * @param {() => void} [props.onRequestClose] A function to call when the dialog is requested to close (i.e., when the close event is fired on the dialog).\n * @param {React.ReactNode} props.children The content inside the dialog.\n *\n * @returns {React.ReactElement} Returns a dialog element.\n *\n * @example\n * ```jsx\n * const { isOpen, openDialog, closeDialog } = useDialog();\n *\n * return (\n *   <div>\n *     <button onClick={openDialog}>Open Dialog</button>\n *     <Dialog isOpen={isOpen} onRequestClose={closeDialog}>\n *       <p>This is a dialog</p>\n *     </Dialog>\n *   </div>\n * );\n * ```\n */\nconst StyledDialog = styled.dialog({}, ...commonSystemProps);\nconst Dialog = ({ isOpen, isModal, onRequestClose, children, ...props }) => {\n    const dialogRef = useRef(null);\n    useEffect(() => {\n        if (dialogRef.current) {\n            isOpen\n                ? isModal\n                    ? dialogRef.current.showModal()\n                    : dialogRef.current.show()\n                : dialogRef.current.close();\n        }\n    }, [isOpen, isModal]);\n    useEffect(() => {\n        const dialogNode = dialogRef.current;\n        if (dialogNode) {\n            const handleCloseEvent = () => {\n                onRequestClose && onRequestClose();\n            };\n            dialogNode.addEventListener(\"close\", handleCloseEvent);\n            return () => {\n                dialogNode.removeEventListener(\"close\", handleCloseEvent);\n            };\n        }\n        else {\n            return;\n        }\n    }, [onRequestClose]);\n    return (_jsx(StyledDialog, { ref: dialogRef, ...props, children: children }));\n};\nexport default Dialog;\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `FlexBox` is a styled-component used to create flex containers.\n *\n * @component\n * @example\n * ```jsx\n * <FlexBox>\n *   <Box>Item 1</Box>\n *   <Box>Item 2</Box>\n *   <Box>Item 3</Box>\n * </FlexBox>\n * ```\n */\nconst FlexBox = styled.div({ display: \"flex\" }, ...commonSystemProps, (props) => ({\n    gap: props.gap,\n}));\nexport default FlexBox;\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `Form` is a styled-component used to create HTML form elements.\n *\n * @component\n * @example\n * ```jsx\n * <Form onSubmit={handleSubmit}>\n *   <Label>\n *     Name:\n *     <Input type=\"text\" />\n *   </Label>\n *   <Button type=\"submit\">Submit</Button>\n * </Form>\n * ```\n */\nconst Form = styled.form({}, ...commonSystemProps);\nexport default Form;\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `Grid` is a styled-component used to create grid layouts.\n *\n * The `gridTemplateColumns` prop can be used to specify the column structure of the grid.\n *\n * The `gap` prop can be used to specify the space between grid items.\n *\n * The `gridAutoRows` and `gridAutoColumns` props can be used to specify the size of rows and columns respectively\n * that are created implicitly by placing items outside the explicit grid.\n *\n * @component\n * @example\n * ```jsx\n * <Grid gridTemplateColumns=\"repeat(3, 1fr)\" gap=\"10px\">\n *  <Box bg=\"lightgray\">Box 1</Box>\n *  <Box bg=\"lightgray\">Box 2</Box>\n *  <Box bg=\"lightgray\">Box 3</Box>\n * </Grid>\n * ```\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\n */\nconst Grid = styled.div({ display: \"grid\" }, ...commonSystemProps, (props) => ({\n    gap: props.gap,\n}));\nexport default Grid;\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `Input` is a styled-component used to create HTML input elements.\n *\n * @component\n * @example\n * ```jsx\n * <Label>\n *   Name:\n *   <Input type=\"text\" />\n * </Label>\n * ```\n */\nconst Input = styled.input({}, ...commonSystemProps);\nexport default Input;\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `Text` is a styled-component used for displaying text content.\n *\n * @component\n * @example\n * ```jsx\n * <Text>This is some text.</Text>\n * ```\n */\nconst Text = styled.div({}, ...commonSystemProps);\nexport default Text;\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `Label` is a styled-component used to create HTML label elements.\n *\n * @component\n * @example\n * ```jsx\n * <Label>\n *   Name:\n *   <Input type=\"text\" />\n * </Label>\n * ```\n */\nconst Label = styled.label({}, ...commonSystemProps);\nexport default Label;\n","import styled from \"styled-components\";\nimport { commonSystemProps } from \"../system\";\n/**\n * `TextArea` is a styled-component used to create HTML textarea elements.\n *\n * @component\n * @example\n * ```jsx\n * <Label>\n *   Message:\n *   <TextArea rows={4} />\n * </Label>\n * ```\n */\nconst TextArea = styled.textarea({}, ...commonSystemProps);\nexport default TextArea;\n"],"names":["commonSystemProps","space","color","layout","typography","flexbox","grid","background","border","position","shadow","props","styledCss","styled","Button","Input","Text"],"mappings":"uLAMO,MAAMA,EAAoB,CAC7BC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACCC,GAAUA,EAAM,KAAOC,EAAUD,EAAM,GAAG,CAC/C,ECLYE,EAAO,IAAI,CAEvB,EAAG,GAAGb,CAAiB,ECFlB,MAACc,EAASD,EAAO,OAAO,CACzB,OAAQ,UACR,YAAa,CACT,QAAS,GACT,OAAQ,aACX,CACL,EAAG,GAAGb,CAAiB,ECaFa,EAAO,OAAO,CAAE,EAAE,GAAGb,CAAiB,ECjB3Ca,EAAO,IAAI,CAAE,QAAS,MAAQ,EAAE,GAAGb,EAAoBW,IAAW,CAC9E,IAAKA,EAAM,GACf,EAAE,ECAWE,EAAO,KAAK,CAAE,EAAE,GAAGb,CAAiB,ECMpCa,EAAO,IAAI,CAAE,QAAS,MAAQ,EAAE,GAAGb,EAAoBW,IAAW,CAC3E,IAAKA,EAAM,GACf,EAAE,ECXG,MAACI,EAAQF,EAAO,MAAM,CAAA,EAAI,GAAGb,CAAiB,ECH7CgB,EAAOH,EAAO,IAAI,CAAA,EAAI,GAAGb,CAAiB,ECGlCa,EAAO,MAAM,CAAE,EAAE,GAAGb,CAAiB,ECAlCa,EAAO,SAAS,CAAE,EAAE,GAAGb,CAAiB"}