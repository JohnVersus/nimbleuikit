import{j as u,a as m,F as b}from"./jsx-runtime-91a467a5.js";import{r as n}from"./index-8db94870.js";import{B as d}from"./Box-27aaf5fd.js";import"./Button-76d85f6b.js";import{s as S,c as C}from"./system-8e4bc0f2.js";import"./FlexBox-3590fa2e.js";import"./Form-0f5723e2.js";import"./Grid-9cc8b09a.js";import"./Label-3503ff7d.js";import"./IntlText-8e3517f4.js";import"./Text-3e49330d.js";import"./TextArea-f6fca39f.js";import"./Body-d5e6a869.js";import"./ContentLoader-ab8283dc.js";import"./Header-f221caa9.js";import"./Loader-2b6d4952.js";import"./SEO-a0f424ca.js";const v=S.dialog({},...C),f=({isOpen:r,isModal:c,onRequestClose:o,children:a,...t})=>{const e=n.useRef(null);return n.useEffect(()=>{e.current&&(r?c?e.current.showModal():e.current.show():e.current.close())},[r,c]),n.useEffect(()=>{const s=e.current;if(s){const i=()=>{o&&o()};return s.addEventListener("close",i),()=>{s.removeEventListener("close",i)}}else return},[o]),u(v,{ref:e,...t,children:a})};try{f.displayName="Dialog",f.__docgenInfo={description:"",displayName:"Dialog",props:{isOpen:{defaultValue:null,description:"",name:"isOpen",required:!1,type:{name:"boolean"}},isModal:{defaultValue:null,description:"",name:"isModal",required:!1,type:{name:"boolean"}},onRequestClose:{defaultValue:null,description:"",name:"onRequestClose",required:!1,type:{name:"(() => void)"}},as:{defaultValue:null,description:"The HTML element or custom component as which the component should render",name:"as",required:!1,type:{name:"ElementType<any>"}},children:{defaultValue:null,description:"The content of the component",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},css:{defaultValue:null,description:`Custom CSS for the component.
This can either be a CSSObject, or a function that receives the theme and returns a CSSObject.`,name:"css",required:!1,type:{name:"CSSObject | ((theme: any) => CSSObject)"}}}}}catch{}const h=({children:r,content:c,visible:o,tipPosition:a="dynamic",...t})=>{const e=n.useRef(null),[s,i]=n.useState(!1),[l,p]=n.useState(a);return n.useEffect(()=>{i(o||!1)},[o]),n.useEffect(()=>{if(a==="dynamic"&&e.current){const y=e.current.getBoundingClientRect(),g=window.innerHeight;p(y.y>g/2?"top":"bottom")}else p(a)},[a]),m(d,{ref:e,onMouseEnter:()=>{o!==!0&&i(!0)},onMouseLeave:()=>{o!==!0&&i(!1)},display:"inline-flex",justifyContent:"center",alignItems:"center",position:"relative",...t,children:[r,s&&m(b,{children:[u(d,{bg:`${typeof t.tooltipBgColor=="string"?t.tooltipBgColor:"#333"}`,borderRadius:"4px",color:"white",fontSize:"14px",p:"8px",position:"absolute",textAlign:"center",zIndex:"100",top:l==="bottom"?"calc(100% + 5px)":void 0,bottom:l==="top"?"calc(100% + 5px)":void 0,left:"50%",css:{transform:"translateX(-50%)"},children:c}),u(d,{width:"0",height:"0",borderLeft:"5px solid transparent",borderRight:"5px solid transparent",position:"absolute",top:l==="bottom"?"100%":void 0,bottom:l==="top"?"100%":void 0,left:"50%",borderBottom:l==="bottom"?`5px solid ${typeof t.tooltipBgColor=="string"?t.tooltipBgColor:"#333"}`:void 0,borderTop:l==="top"?`5px solid ${typeof t.tooltipBgColor=="string"?t.tooltipBgColor:"#333"}`:void 0,css:{transform:"translateX(-50%)"}})]})]})};try{h.displayName="Tooltip",h.__docgenInfo={description:"",displayName:"Tooltip",props:{children:{defaultValue:null,description:"The content of the component",name:"children",required:!0,type:{name:"ReactNode"}},content:{defaultValue:null,description:"",name:"content",required:!0,type:{name:"ReactNode"}},visible:{defaultValue:null,description:"",name:"visible",required:!1,type:{name:"boolean"}},tipPosition:{defaultValue:{value:"dynamic"},description:"",name:"tipPosition",required:!1,type:{name:"enum",value:[{value:'"bottom"'},{value:'"top"'},{value:'"dynamic"'}]}},tooltipBgColor:{defaultValue:null,description:"",name:"tooltipBgColor",required:!1,type:{name:"Color"}},as:{defaultValue:null,description:"The HTML element or custom component as which the component should render",name:"as",required:!1,type:{name:"ElementType<any>"}},css:{defaultValue:null,description:`Custom CSS for the component.
This can either be a CSSObject, or a function that receives the theme and returns a CSSObject.`,name:"css",required:!1,type:{name:"CSSObject | ((theme: any) => CSSObject)"}}}}}catch{}export{f as D,h as T};
//# sourceMappingURL=Tooltip-1374056d.js.map
